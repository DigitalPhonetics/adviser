# general rules

rule hello(): "(\\b|^|\\ )(hi|hello|howdy|hey)\\b"
rule bye(): "(\\b|^|\\ )(bye(-)?(bye)?|good(-)?bye|that'?s?\\ (is\\ )*all)(\\s|$|\\ |\\.)"
rule deny(): "((\\b|^|\\ )(n(o)?|wrong|incorrect|error|nope)|(not\\ (true|correct|right)))(\\s)?$"
rule affirm(): "((yes|yeah|(\\b|^)ok\\b|(\\b|^)OK|okay|sure|^y$|(\\b|^)yep(\\b|$)|(that('?s| is) )?(?<!not\\ )(?<!no\\ )(right|correct|confirm)))(\\s)?$"
rule thanks(): "(?=.*(^(\\ )*)(((great|good|awesome|nice|cool)\\ )?((that((')?s|\\ (is|was))\\ (very\\ )?helpful)\\ )?(thank|thank(s|\\ you)(\\ (very|so)\\ much)?)(\\ (that((')?s|\\ (is|was))\\ (very\\ )?helpful))?|((great|good|awesome|nice|cool)\\ )?(that((')?s|\\ (is|was))\\ (very\\ )?helpful)|(great|good|awesome|nice|cool))((\\ )*))(?=^(?:(?!bye).)*$).*$"
rule repeat(): "(\\b|^|\\ )(repeat((\\ that )|(\\ it))?)|(say((\\ that )|(\\ it))\\ again)|(again)"
rule reqalts(): "(\\b|^|\\ )((something|anything)\\ else)|(different(\\ one)*)|(another\\ one)|(alternatives*)|(other options*)|((don'*t|do not) (want|like)\\ (that|this)(\\ one)*)"
rule ack(): "{IMPOSSIBLEREGEX()}"
rule bad(): "{IMPOSSIBLEREGEX()}"

# user informable slots are name, department and position

rule inform(name)
    "{rINFORM()} {synonyms("name", name)}"
    "{synonyms("name", name)}{WBG()}"
    "(\\ |^){synonyms("name", name)}(\\ (please|and))*"

rule inform(department)
    # "\\\\b{department}\\\\b"
    "{rINFORM()} {synonyms("department", department)}"
    "{synonyms("department", department)}{WBG()}"
    "(\\ |^){synonyms("department", department)}(\\ (please|and))*"

rule inform(position)
    # "\\\\b{position}\\\\b"
    "{rINFORM()} {synonyms("position", position)}"
    "{synonyms("position", position)}{WBG()}"
    "(\\ |^){synonyms("position", position)}(\\ (please|and))*"


# All slots are requestable


rule request(department)
    "{rREQUEST()} {slot_synonyms("department")}"
    "(?<!{DONTCAREWHAT()})(?<!want ){IT()} {slot_synonyms("department")}"
    "(?<!{DONTCARE()}){WHAT()} {slot_synonyms("department")}"
    "{WANT()}.*{slot_synonyms("department")}"
    "(the )?{slot_synonyms("department")}"

rule request(mail)
    "{rREQUEST()} {slot_synonyms("mail")}"
    "(?<!{DONTCAREWHAT()})(?<!want ){IT()} {slot_synonyms("mail")}"
    "(?<!{DONTCARE()}){WHAT()} {slot_synonyms("mail")}"
    "{WANT()}.*{slot_synonyms("mail")}"
    "(the )?{slot_synonyms("mail")}"
    "what .*{slot_synonyms("name")}"

rule request(name)
    "{rREQUEST()} {slot_synonyms("name")}"
    "(?<!{DONTCAREWHAT()})(?<!want ){IT()} {slot_synonyms("name")}"
    "(?<!{DONTCARE()}){WHAT()} {slot_synonyms("name")}"
    "{WANT()}.*{slot_synonyms("name")}"
    "(the )?{slot_synonyms("name")}"
    "who .*{slot_synonyms("name")}"

rule request(office_hours)
    "{rREQUEST()} {slot_synonyms("office_hours")}"
    "(?<!{DONTCAREWHAT()})(?<!want ){IT()} {slot_synonyms("office_hours")}"
    "(?<!{DONTCARE()}){WHAT()} {slot_synonyms("office_hours")}"
    "{WANT()}.*{slot_synonyms("office_hours")}"
    "(the )?{slot_synonyms("office_hours")}"
    "when( .*|$)|at what time {slot_synonyms("office_hours")}"

rule request(phone)
    "{rREQUEST()} {slot_synonyms("phone")}"
    "(?<!{DONTCAREWHAT()})(?<!want ){IT()} {slot_synonyms("phone")}"
    "(?<!{DONTCARE()}){WHAT()} {slot_synonyms("phone")}"
    "{WANT()}.*{slot_synonyms("phone")}"
    "(the )?{slot_synonyms("phone")}"
    "what .*{slot_synonyms("phone")}"

rule request(position)
    "{rREQUEST()} {slot_synonyms("position")}"
    "(?<!{DONTCAREWHAT()})(?<!want ){IT()} {slot_synonyms("position")}"
    "(?<!{DONTCARE()}){WHAT()} {slot_synonyms("position")}"
    "{WANT()}.*{slot_synonyms("position")}"
    "(the )?{slot_synonyms("position")}"

rule request(room)
    "{rREQUEST()} {slot_synonyms("room")}"
    "(?<!{DONTCAREWHAT()})(?<!want ){IT()} {slot_synonyms("room")}"
    "(?<!{DONTCARE()}){WHAT()} {slot_synonyms("room")}"
    "{WANT()}.*{slot_synonyms("room")}"
    "(the )?{slot_synonyms("room")}"
    "where( is .*|$){slot_synonyms("room")}"


# synonyms

function synonyms(slot, value)
    "{value}"

    add_if slot = "name"
        if value = "agnieska falenska"
            "agnieska"
            "falenska"
        if value = "apl. prof. dr. sabine schulte im walde"
            "sabine"
            "schulte"
            "walde"
        if value = "apl. prof. dr. uwe reyle"
            "uwe"
            "reyle"
        if value = "diego frassinelli"
            "diego"
            "frassinelli"
        if value = "dominik schlechtweg"
            "dominik"
            "schlechtweg"
        if value = "dr. antje roßdeutscher"
            "roßdeutscher"
        if value = "dr. antje schweitzer"
            "schweitzer"
        if value = "dr. jörg mayer"
            "jörg"
            "mayer"
        if value = "dr. katrin schneider"
            "katrin"
            "schneider"
        if value = "dr. roman klinger"
            "roman"
            "klinger"
        if value = "dr. wolfgang wokurek"
            "wolfgang"
            "wokurek"
        if value = "michael roth"
            "michael"
            "roth"
        if value = "univ. prof. dr. sebastian pado"
            "sebastian"
            "pado"
        if value = "univ. prof. dr. thang vu"
            "thang"
            "vu"
    
    add_if slot = "department"
        if value = "phonetics"
            "phonetic(s)?"
            "speech"
        if value = "theory"
            "theoretical"
            "statistical"
            "statistics"
        if value = "foundations"
            "foundation(s)?"
            "fundamental"
        if value = "external"
            "(not at|outside) (the )?ims"
            "informatic(s)?"
            "(computer)? science"
            "\\bcs$"
            "informatik"
            "linguistic"
            "linguistik"
    
    add_if slot = "position"
        if value = "adviser"
            "(student )?adviser"
            "studiengangsmanager(in)?"
        if value = "erasmus"
            "(european community action scheme for the mobility of university students)"
        if value = "examination"
            "Prüfungsausschuss(vorsitzende(r)?)?"
        if value = "gender"
            "gender( |\-)beauftragte(r)?"
        if value = "phd"
            "doctoral( student| candidate)"
            "doktorand"
        if value = "postdoc"
            "post doc"
            "postdoktorand"
            "promovierter"
        if value = "professor"
            "prof"
        if value = "senate"
            "(akademischer )?rat"

function slot_synonyms(slot)
    "{IMPOSSIBLEREGEX()}"

    if slot = "name"
        "name"
        "{domain_vocab()}('s)? name"
        "name of the {domain_vocab()}"
    if slot = "department"
        "department(s)?"
        "institute"
    if slot = "office_hours"
        "(office |consultation )?(hour(s)?)"
        "Sprechstunde(n)?"
    if slot = "mail"
        "email"
        "mail"
        "e\-mail"
    if slot = "phone"
        "telephone"
        "phone( number)?$"
        "number"
    if slot = "room"
        "room"
        "(?=.*(room|office))(?=^(?:(?!hours).)*$).*$"
    if slot = "position"
        "(administrative )?position"


# constants

function domain_vocab(): "(lecturer|teacher)"
function IMPOSSIBLEREGEX(): "^\b$"
function WHAT(): "(what(\\')?(s)?|which|does|where)(\\ (its|the))*"
function IT(): "(it\\'*s*|it\\ have|is\\ it\\'*s*|is\\ (the|their))(\\ for)*"
function CYTM(): "(can\\ you\\ tell\\ me\\ (the|it\\'*s|their))"
function CIG(): "(can\\ I\\ get\\ (the|it\\'*s|their))"
function NEGATE(): "((i\\ )*(don\\'?t|do\\ not|does\\ not|does\\'?nt)\\ (care|mind|matter)(\\ (about|what))*(\\ (the|it\\'?s*))*)"
# Cant create variable lengths with negative lookback... else merge following:
function DONTCARE(): "(i\\ dont\\ care)"
function DONTCAREWHAT(): "(i\\ dont\\ care\\ what\\ )"
function DONTCAREABOUT(): "(i\\ dont\\ care\\ about\\ )"
function rREQUEST(): "(\\\\b|^|\\ )(?<!{DONTCARE()})({WHAT()}\\ {IT()}|{CYTM()}|{CIG()})"
function WANT(): "(what\\ about|want|have|need|looking\\ for|used\\ for)(\\ a(n)?)*"
function WBG(): "(\\ ((would|seems\\ to)\\ be\\ (good|nice)($|[^\\?]$)|seems\\ (good|nice)($|[^\\?]$)))"
function rINFORM(): "(\\\\b|^|\\ ){WANT()}"
function rINFORM_DONTCARE(): "{DONTCARE()} ((what|which|about)(\\ (it\\'*s*|the))*)+"
function rINFORM_DONTWANT(): "(((i\\ )*(don\\'*t\\ want))|it\\ (shouldn\\'*t|should\\ not)\\ (have|be))+"
# Contextual dontcares: i.e things that should be labelled inform(=dontcare)
function rCONTEXTUAL_DONTCARE(): "(anything(?!\\ else)|((any$|any\\ kind)|(i\\ )*(don\\'?t|do\\ not)\\ (care|know))($|(?!\\ (a?bout|of|what))|(\\ (a?bout|of|what)\\ (type|kind)(?!\\ of))|\\ a?bout\\ (that|this))|(any(thing)?\\ (is\\ )*(fine|ok\\\\b|okay|will\\ do))($|\\ and|\\ but)|(it )?(doesn\\'?t|does not) matter)+"
